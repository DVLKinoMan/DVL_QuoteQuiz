// <auto-generated />
using System;
using DVL_QuoteQuiz.Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DVL_QuoteQuiz.Domain.Migrations
{
    [DbContext(typeof(QuotesQuizContext))]
    partial class QuotesQuizContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("DVL_QuoteQuiz.Domain.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("DVL_QuoteQuiz.Domain.Models.Quote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Quotes");
                });

            modelBuilder.Entity("DVL_QuoteQuiz.Domain.Models.QuoteAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRightAnswer")
                        .HasColumnType("bit");

                    b.Property<int>("QuoteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("QuoteId");

                    b.ToTable("QuoteAnswers");
                });

            modelBuilder.Entity("DVL_QuoteQuiz.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsAdmin")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bit");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdatedDateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DVL_QuoteQuiz.Domain.Models.UserAnsweredQuote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AnsweredAuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AnsweredDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("AnsweredRight")
                        .HasColumnType("bit");

                    b.Property<int>("QuoteId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("YesNoQuestion")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AnsweredAuthorId");

                    b.HasIndex("QuoteId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAnsweredQuotes");
                });

            modelBuilder.Entity("DVL_QuoteQuiz.Domain.Models.QuoteAnswer", b =>
                {
                    b.HasOne("DVL_QuoteQuiz.Domain.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DVL_QuoteQuiz.Domain.Models.Quote", "Quote")
                        .WithMany("QuoteAnswers")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Quote");
                });

            modelBuilder.Entity("DVL_QuoteQuiz.Domain.Models.UserAnsweredQuote", b =>
                {
                    b.HasOne("DVL_QuoteQuiz.Domain.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AnsweredAuthorId");

                    b.HasOne("DVL_QuoteQuiz.Domain.Models.Quote", "Quote")
                        .WithMany()
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DVL_QuoteQuiz.Domain.Models.User", "User")
                        .WithMany("AnsweredQuotes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Quote");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DVL_QuoteQuiz.Domain.Models.Quote", b =>
                {
                    b.Navigation("QuoteAnswers");
                });

            modelBuilder.Entity("DVL_QuoteQuiz.Domain.Models.User", b =>
                {
                    b.Navigation("AnsweredQuotes");
                });
#pragma warning restore 612, 618
        }
    }
}
